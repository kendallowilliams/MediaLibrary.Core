// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MediaLibrary.DAL.Models;

#nullable disable

namespace MediaLibrary.DAL.DbContexts
{
    public partial class MediaLibraryEntities : DbContext
    {
        public MediaLibraryEntities(DbContextOptions<MediaLibraryEntities> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Episode> Episodes { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<PlaylistEpisode> PlaylistEpisodes { get; set; }
        public virtual DbSet<PlaylistPodcastItem> PlaylistPodcastItems { get; set; }
        public virtual DbSet<PlaylistTrack> PlaylistTracks { get; set; }
        public virtual DbSet<Podcast> Podcasts { get; set; }
        public virtual DbSet<PodcastItem> PodcastItems { get; set; }
        public virtual DbSet<Series> Series { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
        public virtual DbSet<TrackPath> TrackPaths { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=MediaLibrary.DB;Integrated Security=true");

            modelBuilder.Entity<Album>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Title).IsUnicode(false);

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.Genre)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.GenreId)
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity<Artist>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Configuration>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.JsonData).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
            });

            modelBuilder.Entity<Episode>(entity =>
            {
                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Path).IsUnicode(false);
            });

            modelBuilder.Entity<Genre>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Playlist>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<PlaylistEpisode>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Episode)
                    .WithMany(p => p.PlaylistEpisodes)
                    .HasForeignKey(d => d.EpisodeId)
                    .HasConstraintName("FK_playlist_episode_episode");

                entity.HasOne(d => d.Playlist)
                    .WithMany(p => p.PlaylistEpisodes)
                    .HasForeignKey(d => d.PlaylistId)
                    .HasConstraintName("FK_playlist_episode_playlist");
            });

            modelBuilder.Entity<PlaylistPodcastItem>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Playlist)
                    .WithMany(p => p.PlaylistPodcastItems)
                    .HasForeignKey(d => d.PlaylistId)
                    .HasConstraintName("FK_playlist_podcastitem_playlist");

                entity.HasOne(d => d.PodcastItem)
                    .WithMany(p => p.PlaylistPodcastItems)
                    .HasForeignKey(d => d.PodcastItemId)
                    .HasConstraintName("FK_playlist_podcastitem_podcastitem");
            });

            modelBuilder.Entity<PlaylistTrack>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Playlist)
                    .WithMany(p => p.PlaylistTracks)
                    .HasForeignKey(d => d.PlaylistId)
                    .HasConstraintName("FK_playlist_track_playlist");

                entity.HasOne(d => d.Track)
                    .WithMany(p => p.PlaylistTracks)
                    .HasForeignKey(d => d.TrackId)
                    .HasConstraintName("FK_playlist_track_track");
            });

            modelBuilder.Entity<Podcast>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.Author).IsUnicode(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Title).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<PodcastItem>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.File).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Title).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<Series>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<Track>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Title).IsUnicode(false);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.AlbumId)
                    .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.Genre)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.GenreId)
                    .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.Path)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.PathId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<TrackPath>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.LastScanDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.CreateDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.ModifyDate).HasDefaultValueSql("getdate()");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}