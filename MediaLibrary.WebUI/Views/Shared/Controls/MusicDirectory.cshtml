@model MusicDirectory

@{
    bool hasFolders = Model.SubDirectories.Any(),
         canGoBack = Model.SubDirectories.Any(item => item.Path.EndsWith(".."));
}


@if (hasFolders)
{
    @if (canGoBack)
    {
        MusicDirectory directory = Model.SubDirectories.FirstOrDefault(item => item.Path.EndsWith(".."));

        <div>
            <div class="input-group input-group-sm">
                <button class="btn btn-sm btn-outline-secondary" data-directory-action="get" data-directory-path="@(directory.Path)"
                        data-bs-tooltip="tooltip" title="Go back">
                    <i class="fa fa-arrow-left fa-1x"></i>
                </button>
                <input class="form-control font-weight-bold text-truncate text-right" readonly="readonly" value="@(Model.Path)" />
            </div>
            <hr />
        </div>
    }

    <div class="d-flex flex-row flex-wrap flex-fill">
        @foreach (var item in Model.SubDirectories.Where(item => !item.Path.EndsWith("..")))
        {
            string directoryName = item.Path.Split(new char[] { System.IO.Path.DirectorySeparatorChar }, StringSplitOptions.RemoveEmptyEntries).LastOrDefault();

            if (item.HasFiles || item.HasDirectories)
            {
                <div class="input-group input-group-sm mb-1">
                    @if (item.IsLoading || item.Id.HasValue || item.HasFiles)
                    {
                        @if (item.IsLoading)
                        {
                            <button class="btn btn-outline-success" disabled="disabled" data-transaction-id="@(item.TransactionId)" data-directory-status="loading"
                                    style="cursor: default">
                                <i class="fa fa-spinner fa-spin"></i>
                            </button>
                        }
                        else if (item.Id.HasValue)
                        {
                            <button class="btn btn-outline-danger" data-path-id="@(item.Id)" data-directory-action-type="remove"
                                    data-directory-action="@(Url.Action(nameof(MusicController.RemoveMusicDirectory), "Music"))"
                                    data-bs-tooltip="tooltip" title="Remove directory">
                                <i class="fa fa-folder-minus"></i>
                            </button>
                        }
                        else if (item.HasFiles)
                        {
                            <button class="btn btn-outline-success" data-directory-action="@(Url.Action(nameof(MusicController.AddMusicDirectory), "Music"))"
                                    data-directory-path="@(item.Path)" data-directory-action-type="add"
                                    data-bs-tooltip="tooltip" title="Add directory">
                                <i class="fa fa-folder-plus"></i>
                            </button>
                        }
                    }
                    <input class="form-control font-weight-bold text-truncate" readonly="readonly" value="@(directoryName)" />
                    @if (item.HasDirectories)
                    {
                        <button class="btn btn-outline-secondary" data-directory-action="get" data-directory-path="@(item.Path)"
                                data-bs-tooltip="tooltip" title="Browse">
                            <i class="fa fa-arrow-right"></i>
                        </button>
                    }
                </div>
            }
        }
    </div>
}
else
{
    <div class="p-1">No folders found.</div>
}
